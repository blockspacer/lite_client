/********************************************************************
 * This file is generated by program cap
 * Please do not change it directly
 * 
 * protocol name: CProto
 * protocol version: 1.0
 * protocol author:   
 * protocol desc: 仙剑卡牌客户端后台交互协议-控制协议
 *
 * history:
 * 2013-02-22 : 创建 (V1.0)
********************************************************************/

#include "ProtoSytDef.h"

#ifndef __ProtoSyt_H__ 
#define __ProtoSyt_H__ 

#include "CProto_Common.h"

#include "CProto.h"

#include "ProtoBattle.h" /*  */


namespace CProto {
/* 锁妖塔进度 */
struct SytProgress {
public:
    void Encode(unsigned char *buffer, unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer, unsigned int& bufferlen) throw (DecodeError);

    SytProgress();
    void SetDefault();

/* 打到的锁妖塔层[1,10], TOP_LEVEL表示全部通关 */
    unsigned char level;
/* 当前层pve打的关卡数[1,15] */
    unsigned char pve_index;
/* 当前层的总事件进度 */
    unsigned char ev_index;

private:
    unsigned int arraysize;
};
/* pve数据 */
struct SytEvPveData {
public:
    void Encode(unsigned char *buffer, unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer, unsigned int& bufferlen) throw (DecodeError);

    SytEvPveData();
    void SetDefault();

/* pve战斗引用stage_battle.txt */
    int stage_id;
/* 怪说的话 */
    int dialog_id;

private:
    unsigned int arraysize;
};
/* pvp数据 */
struct SytEvPvpData {
public:
    void Encode(unsigned char *buffer, unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer, unsigned int& bufferlen) throw (DecodeError);

    SytEvPvpData();
    void SetDefault();

    unsigned char reserved;


private:
    unsigned int arraysize;
};
/* 宝箱奖励的物品 */
struct SytEvTCAwardItem {
public:
    void Encode(unsigned char *buffer, unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer, unsigned int& bufferlen) throw (DecodeError);

    SytEvTCAwardItem();
    void SetDefault();

    int item_id;

    unsigned char count;


private:
    unsigned int arraysize;
};
/* 宝箱数据 */
struct SytEvTreasureChestData {
public:
    void Encode(unsigned char *buffer, unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer, unsigned int& bufferlen) throw (DecodeError);

    SytEvTreasureChestData();
    void SetDefault();

/* id引用treasurebox/box.txt */
    int chest_id;
/* 奖励的物品 */
    unsigned char items_arraylen;	SytEvTCAwardItem items[MAX_NUM_TC_AWARD_ITEM];
    int silver;

    int gold;

    int exp;

/* 守卫怪id, 引用stage_battle.txt */
    int guard_stage_id;
/* 守卫说话 */
    int dialog_id;

private:
    unsigned int arraysize;
};
/* 奇遇数据 */
struct SytEvAdvData {
public:
    void Encode(unsigned char *buffer, unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer, unsigned int& bufferlen) throw (DecodeError);

    SytEvAdvData();
    void SetDefault();

/* 目标武将的id, general.txt */
    int target_general_id;
/* 候选的武将id */
    unsigned char candidates_arraylen;	int candidates[NUM_ADV_GP_CDD];
/* 询问对白 */
    int ask_dialog_id;
/* 答对对白 */
    int success_dialog_id;
/* 答错对白 */
    int fail_dialog_id;

private:
    unsigned int arraysize;
};
/* 随机奖励数据 */
struct SytEvRandAwardData {
public:
    void Encode(unsigned char *buffer, unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer, unsigned int& bufferlen) throw (DecodeError);

    SytEvRandAwardData();
    void SetDefault();

/* 银两 */
    int money;
/* 经验 */
    int exp;

private:
    unsigned int arraysize;
};
/* 锁妖塔事件 */
struct SytEvent {
public:
    void Encode(unsigned char *buffer, unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer, unsigned int& bufferlen) throw (DecodeError);

    SytEvent();
    void SetDefault();

/* 事件id */
    SytEventTag tag;
/* 发送pve数据 */
    SytEvPveData pve;
/* 发送pvp数据 */
    SytEvPvpData pvp;
/* 发送宝箱数据 */
    SytEvTreasureChestData treasure_chest;
/* 奇遇数据 */
    SytEvAdvData adv_data;
/* 随机奖励数据 */
    SytEvRandAwardData rand_award_data;

private:
    unsigned int arraysize;
};
/* 事件序列 */
struct SytEvSeq {
public:
    void Encode(unsigned char *buffer, unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer, unsigned int& bufferlen) throw (DecodeError);

    SytEvSeq();
    void SetDefault();

/* 层 */
    unsigned char level;
/* 事件序列 */
    unsigned char seq_arraylen;	SytEvent seq[MAX_NUM_EVENTS];

private:
    unsigned int arraysize;
};
/*  */
struct SytJAL_ITEM {
public:
    void Encode(unsigned char *buffer, unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer, unsigned int& bufferlen) throw (DecodeError);

    SytJAL_ITEM();
    void SetDefault();

    int item_id;

    int con_idx;

    int count;


private:
    unsigned int arraysize;
};
/*  */
struct SytJAL_Soul {
public:
    void Encode(unsigned char *buffer, unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer, unsigned int& bufferlen) throw (DecodeError);

    SytJAL_Soul();
    void SetDefault();

    int general_id;

    int con_idx;

    int count;


private:
    unsigned int arraysize;
};
/*  */
struct SytJAL_GENERAL_AWARD {
public:
    void Encode(unsigned char *buffer, unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer, unsigned int& bufferlen) throw (DecodeError);

    SytJAL_GENERAL_AWARD();
    void SetDefault();

    short index;

    LevelUpRelated levelup_info;

    short assist_index;

    LevelUpRelated assist_levelup_info;


private:
    unsigned int arraysize;
};
/*  */
struct SytJAL_SKILL {
public:
    void Encode(unsigned char *buffer, unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer, unsigned int& bufferlen) throw (DecodeError);

    SytJAL_SKILL();
    void SetDefault();

    int skill_id;

    int con_idx;

    int count;


private:
    unsigned int arraysize;
};
/* 跳层奖励 */
struct SytJumpAwardList {
public:
    void Encode(unsigned char *buffer, unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer, unsigned int& bufferlen) throw (DecodeError);

    SytJumpAwardList();
    void SetDefault();

    int energy;

    int spirit;

    int exp;

    int silver;

    LevelUpRelated levelup_info;

    int general_exp;

    unsigned char item_arraylen;	SytJAL_ITEM item[MAX_AWARD_ITEM_NUM];

    unsigned char soul_arraylen;	SytJAL_Soul soul[MAX_AWARD_CARD_NUM];

    unsigned char general_arraylen;	SytJAL_GENERAL_AWARD general[MAX_BATTLE_OBJ_NUM];

    unsigned char skill_arraylen;	SytJAL_SKILL skill[MAX_AWARD_SKILL_NUM];


private:
    unsigned int arraysize;
};
class XJCMD_QUERY_PROGRESSCS : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_QUERY_PROGRESSCS();
    void SetDefault();

    

private:
    unsigned int arraysize;
};
class XJCMD_QUERY_PROGRESSSC : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_QUERY_PROGRESSSC();
    void SetDefault();

    
/* 是否是第一次玩这个活动 */
    unsigned char firsttime;
/* 可以跳的层数 */
    unsigned char levels_can_jump;
/* 今天剩余挑战次数 */
    unsigned char play_times;
/* 今天最多挑战次数 */
    unsigned char max_play_times;
/* 0-无进度 1-有进度 */
    char have_progress;
/* 进度数据 */
    SytProgress progress;

private:
    unsigned int arraysize;
};
class XJCMD_LEVEL_STARTCS : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_LEVEL_STARTCS();
    void SetDefault();

    
/* 开始的选项 */
    SytStartOpt opt;
/* 跳层开始 */
    unsigned char jump_levels;

private:
    unsigned int arraysize;
};
class XJCMD_LEVEL_STARTSC : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_LEVEL_STARTSC();
    void SetDefault();

    
/* SytECode错误代码 */
    SytECode retcode;
/* 跳层开始 */
    unsigned char jump_levels;
/* 事件序列 */
    SytEvSeq ev_seq;
/* 跳层奖励 */
    SytJumpAwardList jump_award_list;
/* 是否是第一次来到这一层 */
    unsigned char firsttime;

private:
    unsigned int arraysize;
};
class XJCMD_LEVEL_NEXTCS : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_LEVEL_NEXTCS();
    void SetDefault();

    

private:
    unsigned int arraysize;
};
class XJCMD_LEVEL_NEXTSC : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_LEVEL_NEXTSC();
    void SetDefault();

    
/* SytECode错误代码 */
    SytECode retcode;
/* 事件序列 */
    SytEvSeq ev_seq;
/* 是否是第一次来到这一层 */
    unsigned char firsttime;

private:
    unsigned int arraysize;
};
class XJCMD_PROCESS_EVENTCS : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_PROCESS_EVENTCS();
    void SetDefault();

    
/* 参数, 暂时定为10个int */
    unsigned char parameters_arraylen;	int parameters[MAX_NUM_EV_INT_PARAM];

private:
    unsigned int arraysize;
};
class XJCMD_PROCESS_EVENTSC : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_PROCESS_EVENTSC();
    void SetDefault();

    
/* SytECode错误代码 */
    SytECode retcode;

private:
    unsigned int arraysize;
};
};


#endif

