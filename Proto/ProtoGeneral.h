/********************************************************************
 * This file is generated by program cap
 * Please do not change it directly
 * 
 * protocol name: CProto
 * protocol version: 1.0
 * protocol author:   
 * protocol desc: 仙剑卡牌客户端后台交互协议-控制协议
 *
 * history:
 * 2013-02-22 : 创建 (V1.0)
********************************************************************/

#include "ProtoGeneralDef.h"

#ifndef __ProtoGeneral_H__ 
#define __ProtoGeneral_H__ 

#include "CProto_Common.h"

#include "CProto.h"

#include "ProtoSkill.h" /* Server定义文件 */


namespace CProto {
/* 武将附加缘数据 */
struct stGeneralFateAddition {
public:
    void Encode(unsigned char *buffer, unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer, unsigned int& bufferlen) throw (DecodeError);

    stGeneralFateAddition();
    void SetDefault();

/* 名字 */
    proto_string<0> name;
/* 详情 */
    stQhtml desc;
/* 是否开启（0-未开启，1-开启） */
    char isopen;

private:
    unsigned int arraysize;
};
/* skill */
struct stSkillEx {
public:
    void Encode(unsigned char *buffer, unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer, unsigned int& bufferlen) throw (DecodeError);

    stSkillEx();
    void SetDefault();

/* 技能id */
    int id;
/* 技能等级 */
    unsigned char level;
/* 技能升级数据 */
    stSkillLevelData skillLeveData;

private:
    unsigned int arraysize;
};
/* 武将数据 */
struct stGeneralData {
public:
    void Encode(unsigned char *buffer, unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer, unsigned int& bufferlen) throw (DecodeError);

    stGeneralData();
    void SetDefault();

/* 在武将容器索引 */
    short container_index;
/* 武将id */
    short id;
/* 等级 */
    short level;
/* 经验 */
    int exp;
/* 星级 */
    char star;
/* 当前修炼级别 */
    char practice_level;
/* 当前修炼的成长值 */
    char practice_growth_value;
/* 修炼累计消耗的元神数量 */
    unsigned int m_consumed_souls_in_practice;
/* 修炼累计消耗的物品数量, 物品id是固定的, 只有一个 */
    unsigned int m_consumed_item_num_in_practice;
/* 武将裸基础属性 */
    unsigned char base_attr_basic_arraylen;	int base_attr_basic[PROTO_GENERAL_FIGHT_BASIC_NUM];
/* 武将基础属性 */
    unsigned char attr_basic_arraylen;	int attr_basic[PROTO_GENERAL_FIGHT_BASIC_NUM];
/* 武将元素属性 */
    unsigned char attr_element_arraylen;	int attr_element[PROTO_GENERAL_FIGHT_ELEMENT_NUM];
/* 武将特殊属性 */
    unsigned char attr_spec_arraylen;	int attr_spec[PROTO_GENERAL_FIGHT_SPEC_NUM];
/* 天生技能 */
    stSkillEx defaul_skill;
/* 援护技能 */
    stSkillEx assist_skill;
/* 武将固定缘开启标志 */
    unsigned char fate_fix_flag_arraylen;	unsigned char fate_fix_flag[MAX_GENERAL_FATE_FIX_NUM];
/* 武将附加缘 */
    proto_vector<stGeneralFateAddition> fate_addition;
/* 战斗力 */
    int combat_power;
/* 最大经验 */
    int maxexp;
/* 功力点 */
    unsigned short kungfu_points;
/* 培养累计消耗的培养丹数量, 培养丹id是固定的 */
    unsigned int consumed_pills_in_training;

private:
    unsigned int arraysize;
};
/* 武将数据 */
struct stLostGeneralData {
public:
    void Encode(unsigned char *buffer, unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer, unsigned int& bufferlen) throw (DecodeError);

    stLostGeneralData();
    void SetDefault();

/* 在武将容器索引 */
    short container_index;
/* 武将id */
    short id;

private:
    unsigned int arraysize;
};
/* 武将元神数据 */
struct stGeneralSoulData {
public:
    void Encode(unsigned char *buffer, unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer, unsigned int& bufferlen) throw (DecodeError);

    stGeneralSoulData();
    void SetDefault();

/* 在武将容器索引 */
    short container_index;
/* 元神数量 */
    char soulnum;

private:
    unsigned int arraysize;
};
/* 武将装备数据 */
struct stBattleArrayEquip {
public:
    void Encode(unsigned char *buffer, unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer, unsigned int& bufferlen) throw (DecodeError);

    stBattleArrayEquip();
    void SetDefault();

/* 在装备容器索引 */
    short container_index;

private:
    unsigned int arraysize;
};
/* 阵法格子数据 */
struct stBattleArrayGeneral {
public:
    void Encode(unsigned char *buffer, unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer, unsigned int& bufferlen) throw (DecodeError);

    stBattleArrayGeneral();
    void SetDefault();

/* 武将在容器中索引 */
    short container_index;
/* 援护武将在容器中索引 */
    short assist_container_index;
/* 援护技能 */
    short skill_index;
/* 上阵武将装备 */
    unsigned char fightgeneral_equip_arraylen;	stBattleArrayEquip fightgeneral_equip[MAX_GENERAL_EQUIP_NUM];
/* 援护武将装备 */
    unsigned char assistgeneral_equip_arraylen;	stBattleArrayEquip assistgeneral_equip[MAX_GENERAL_EQUIP_NUM];

private:
    unsigned int arraysize;
};
/* 阵法数据 */
struct stBattleArray {
public:
    void Encode(unsigned char *buffer, unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer, unsigned int& bufferlen) throw (DecodeError);

    stBattleArray();
    void SetDefault();

/* 阵法武将 */
    unsigned char battlearray_general_arraylen;	stBattleArrayGeneral battlearray_general[MAX_BATTLEARRAY_GENERAL_NUM];

private:
    unsigned int arraysize;
};
/* 10连抽结果 */
struct st10DrawResult {
public:
    void Encode(unsigned char *buffer, unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer, unsigned int& bufferlen) throw (DecodeError);

    st10DrawResult();
    void SetDefault();

/* 抽到的武将id */
    short general_id;
/* 如果souls不为0, 表示武将已有, 得到元神 */
    unsigned char souls;

private:
    unsigned int arraysize;
};
class XJCMD_SC_USERGENERAL_FULLDATASC : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_SC_USERGENERAL_FULLDATASC();
    void SetDefault();

    
/* 数据版本号 */
    char version_db;
/* 数据存储资源版本号 */
    char version_db_res;
/* 动态武将数据 */
    proto_vector<stGeneralData> generals;
/* 动态武将元神数据 */
    proto_vector<char> generalsouls;
/* 动态武将数据 */
    proto_vector<stLostGeneralData> lostgenerals;

private:
    unsigned int arraysize;
};
class XJCMD_SC_USERGENERAL_BATTLEARRAYSC : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_SC_USERGENERAL_BATTLEARRAYSC();
    void SetDefault();

    
/* 数据版本号 */
    char version_db;
/* 当前阵容 */
    stBattleArray battlearray;
/* 当前阵容的阵形ID */
    char battlearray_id;
/* 激活阵形的ID数组 */
    unsigned char battlemapIdArray_arraylen;	unsigned char battlemapIdArray[MAX_BATTLEMAP_NUM];
/* 援护属性转化等级 */
    char attr_assit_level;
/* 援护属性转化比率 */
    char attr_ratio;

private:
    unsigned int arraysize;
};
class XJCMD_SC_USERGENERAL_RES_SYNSC : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_SC_USERGENERAL_RES_SYNSC();
    void SetDefault();

    
/* 静态武将、将魂资源数据版本号 */
    int general_version_res;
/* 1全量，其他增量 */
    char general_full_flag;
/* 静态武将、将魂资源更新数据 */
    proto_vector<char> general_resdata;
/* 静态阵型资源数据版本号 */
    int battlemap_version_res;
/* 1全量，其他增量 */
    char battlemap_full_flag;
/* 静态阵型资源更新数据 */
    proto_vector<char> battlemap_resdata;

private:
    unsigned int arraysize;
};
class XJCMD_CS_BATTLEARR_ASSITPOS_OPENCS : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CS_BATTLEARR_ASSITPOS_OPENCS();
    void SetDefault();

    
/* 援护位置 */
    char pos;

private:
    unsigned int arraysize;
};
class XJCMD_CS_USERGENERAL_BATTLEARRAY_CHANGECS : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CS_USERGENERAL_BATTLEARRAY_CHANGECS();
    void SetDefault();

    
/* 当前阵容 */
    stBattleArray battlearray;
/* 当前阵容索引 */
    char battlearray_id;

private:
    unsigned int arraysize;
};
class XJCMD_SC_USERGENERAL_BATTLEARRAY_CHANGE_RETSC : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_SC_USERGENERAL_BATTLEARRAY_CHANGE_RETSC();
    void SetDefault();

    
/* 1成功，其他失败 */
    char result;
/* 数据版本号 */
    char version_db;

private:
    unsigned int arraysize;
};
class XJCMD_CSC_SUMMON_GENERALCS : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CSC_SUMMON_GENERALCS();
    void SetDefault();

    
/* 元神在容器中的索引 */
    short container_index;

private:
    unsigned int arraysize;
};
class XJCMD_CSC_SUMMON_GENERALSC : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CSC_SUMMON_GENERALSC();
    void SetDefault();

    
/* 元神在容器中的索引 */
    short container_index;
/* 返回值 */
    char ret;
/* 返回消息 */
    proto_string<0> msg;

private:
    unsigned int arraysize;
};
class XJCMD_CSC_GENERAL_PRACTICECS : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CSC_GENERAL_PRACTICECS();
    void SetDefault();

    
/* 武将在容器中的索引 */
    short container_index;

private:
    unsigned int arraysize;
};
class XJCMD_CSC_GENERAL_PRACTICESC : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CSC_GENERAL_PRACTICESC();
    void SetDefault();

    
/* 错误代码 */
    PracticeECode retcode;
/* 武将在容器中的索引 */
    short container_index;
/* 武将裸基础属性 */
    unsigned char base_attr_basic_arraylen;	int base_attr_basic[PROTO_GENERAL_FIGHT_BASIC_NUM];

private:
    unsigned int arraysize;
};
class XJCMD_CSC_GENERAL_PRACTICE_REBUILDCS : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CSC_GENERAL_PRACTICE_REBUILDCS();
    void SetDefault();

    
/* 武将在容器中的索引 */
    short container_index;

private:
    unsigned int arraysize;
};
class XJCMD_CSC_GENERAL_PRACTICE_REBUILDSC : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CSC_GENERAL_PRACTICE_REBUILDSC();
    void SetDefault();

    
/* 错误代码 */
    PracticeECode retcode;
/* 武将在容器中的索引 */
    short container_index;
/* 武将裸基础属性 */
    unsigned char base_attr_basic_arraylen;	int base_attr_basic[PROTO_GENERAL_FIGHT_BASIC_NUM];

private:
    unsigned int arraysize;
};
class XJCMD_CSC_GENERAL_ADD_ADDITION_FATECS : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CSC_GENERAL_ADD_ADDITION_FATECS();
    void SetDefault();

    
/* 武将在容器中的索引 */
    short container_index;
/* 附加缘id */
    int fate_id;
/* 目标id */
    int target_id;

private:
    unsigned int arraysize;
};
class XJCMD_CSC_GENERAL_ADD_ADDITION_FATESC : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CSC_GENERAL_ADD_ADDITION_FATESC();
    void SetDefault();

    
/* 详情 */
    stQhtml desc;

private:
    unsigned int arraysize;
};
class XJCMD_CSC_TRAININGCS : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CSC_TRAININGCS();
    void SetDefault();

    
/* 武将id */
    short general_index;
/* 培养类型, 0:普通, 1:精心 */
    unsigned char type;
/* 培养次数, 不要超过255次 */
    unsigned char count;

private:
    unsigned int arraysize;
};
class XJCMD_CSC_TRAININGSC : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CSC_TRAININGSC();
    void SetDefault();

    
/* 错误代码 */
    TrainingECode retcode;
/* 武将id */
    short general_index;
/* 培养流水号, 要使用这个流水号来确认培养结果 */
    unsigned short serial_number;
/* 被增加的基础属性类型 */
    unsigned char attr_plus_type;
/* 被增加的基础属性数值, 是一个正整数 */
    short attr_plus_val;
/* 被减少的基础属性类型 */
    unsigned char attr_minus_type;
/* 被减少的基础属性数值, 是一个负整数 */
    short attr_minus_val;
/* 消耗的功力点 */
    unsigned short kungfu_points_consumed;

private:
    unsigned int arraysize;
};
class XJCMD_CSC_TRAINING_CONFIRMCS : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CSC_TRAINING_CONFIRMCS();
    void SetDefault();

    
/* 培养流水号 */
    unsigned short serial_number;
/* 是否确定这么做 */
    unsigned char just_do_it;

private:
    unsigned int arraysize;
};
class XJCMD_CSC_TRAINING_CONFIRMSC : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CSC_TRAINING_CONFIRMSC();
    void SetDefault();

    
/* 错误代码 */
    TrainingECode retcode;
/* 培养流水号 */
    unsigned short serial_number;
/* 武将id */
    short general_index;

private:
    unsigned int arraysize;
};
class XJCMD_CSC_KUNGFU_TRANSMITCS : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CSC_KUNGFU_TRANSMITCS();
    void SetDefault();

    
/* 散功者id */
    short transmitter_id;
/* 被传功者id */
    short transmittee_id;
/* 传功类型 */
    unsigned short transmit_type;

private:
    unsigned int arraysize;
};
class XJCMD_CSC_KUNGFU_TRANSMITSC : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CSC_KUNGFU_TRANSMITSC();
    void SetDefault();

    
/* 错误代码 */
    KungfuTransmitECode retcode;
/* 被传功者等级变化 */
    int transmittee_levels_changed;
/* 被传功者获得的经验 */
    int exp_to_transmittee;

private:
    unsigned int arraysize;
};
class XJCMD_CSC_CARDLOTTERY_DRAWCS : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CSC_CARDLOTTERY_DRAWCS();
    void SetDefault();

    
/* 抽卡类型 */
    CardLotteryType lottery_type;

private:
    unsigned int arraysize;
};
class XJCMD_CSC_CARDLOTTERY_DRAWSC : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CSC_CARDLOTTERY_DRAWSC();
    void SetDefault();

    
/* 错误代码 */
    CardLotteryECode retcode;
/* 抽到的武将id */
    short general_id;
/* 如果souls不为0, 表示武将已有, 得到元神 */
    unsigned char souls;
/* 还有多少次可以拿到顶级卡(极品质的卡) */
    char times_to_get_top_card;

private:
    unsigned int arraysize;
};
class XJCMD_CSC_CARDLOTTERY_10_DRAWCS : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CSC_CARDLOTTERY_10_DRAWCS();
    void SetDefault();

    

private:
    unsigned int arraysize;
};
class XJCMD_CSC_CARDLOTTERY_10_DRAWSC : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CSC_CARDLOTTERY_10_DRAWSC();
    void SetDefault();

    
/* 错误代码 */
    CardLotteryECode retcode;
/* 10连抽结果数据集 */
    unsigned char result_arraylen;	st10DrawResult result[10];
/* 还有多少次可以拿到顶级卡(极品质的卡) */
    char times_to_get_top_card;

private:
    unsigned int arraysize;
};
};


#endif

