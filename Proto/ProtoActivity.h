/********************************************************************
 * This file is generated by program cap
 * Please do not change it directly
 * 
 * protocol name: CProto
 * protocol version: 1.0
 * protocol author:   
 * protocol desc: 仙剑卡牌客户端后台交互协议-控制协议
 *
 * history:
 * 2013-02-22 : 创建 (V1.0)
********************************************************************/

#include "ProtoActivityDef.h"

#ifndef __ProtoActivity_H__ 
#define __ProtoActivity_H__ 

#include "CProto_Common.h"

#include "CProto.h"



namespace CProto {
/* 游历动态数据结构 */
struct stActivityData {
public:
    void Encode(unsigned char *buffer, unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer, unsigned int& bufferlen) throw (DecodeError);

    stActivityData();
    void SetDefault();

/* 活动ID */
    unsigned short id;
/* 活动显示标记 0 不显示 1 显示 */
    unsigned char changeflag;
/* 活动开启标记 0 关闭 1 开启 */
    unsigned char activeflag;
/* 活动状态标记 0 不可参加 1 可参加 2 已完成 */
    unsigned char stateflag;
/* 活动已完成次数 */
    unsigned char times;
/* 活动最大次数 */
    unsigned char maxtimes;

private:
    unsigned int arraysize;
};
/* 游历命令通用参数结构 */
struct stActivityCommand {
public:
    void Encode(unsigned char *buffer, unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer, unsigned int& bufferlen) throw (DecodeError);

    stActivityCommand();
    void SetDefault();

/* 活动命令ID */
    unsigned short command;
/* 活动命令名称 */
    unsigned char commandname_arraylen;	char commandname[MAX_LEN_SMALL];
/* Int参数数组 */
    unsigned char intparams_arraylen;	int intparams[MAX_ACTIVITY_COMMAND_PARAM_INT_NUM];
/* Guid参数数组 */
    unsigned char guidparams_arraylen;	uint64_t guidparams[MAX_ACTIVITY_COMMAND_PARAM_GUID_NUM];

private:
    unsigned int arraysize;
};
/* 游历命令通用返回参数结构 */
struct stActivityRetCommand {
public:
    void Encode(unsigned char *buffer, unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer, unsigned int& bufferlen) throw (DecodeError);

    stActivityRetCommand();
    void SetDefault();

/* 活动命令ID */
    unsigned short command;
/* Int参数数组 */
    unsigned char intparams_arraylen;	int intparams[MAX_ACTIVITY_COMMAND_PARAM_INT_NUM];
/* Guid参数数组 */
    unsigned char guidparams_arraylen;	uint64_t guidparams[MAX_ACTIVITY_COMMAND_PARAM_GUID_NUM];
/* QHTML参数数组 */
    unsigned char qhtmlparams_arraylen;	stQhtml qhtmlparams[MAX_ACTIVITY_COMMAND_PARAM_QHTML_NUM];

private:
    unsigned int arraysize;
};
class XJCMD_SC_ACTIVITYS_SYNSC : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_SC_ACTIVITYS_SYNSC();
    void SetDefault();

    
/* 同步的活动动态数据列表 */
    unsigned short activitydatas_arraylen;	stActivityData activitydatas[1024];

private:
    unsigned int arraysize;
};
class XJCMD_CSC_ACTIVITY_COMMANDCS : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CSC_ACTIVITY_COMMANDCS();
    void SetDefault();

    
/* 活动ID */
    unsigned short id;
/* 活动命令数据 */
    stActivityCommand cmd;

private:
    unsigned int arraysize;
};
class XJCMD_CSC_ACTIVITY_COMMANDSC : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CSC_ACTIVITY_COMMANDSC();
    void SetDefault();

    
/* 返回码：0 成功 非0失败 */
    char status;
/* 请求的活动ID */
    unsigned short id;
/* 请求的活动命令返回值 */
    stActivityRetCommand cmd;
/* 更新的命令列表 */
    unsigned char nextcmds_arraylen;	stActivityCommand nextcmds[MAX_LEN_SMALL];

private:
    unsigned int arraysize;
};
};


#endif

