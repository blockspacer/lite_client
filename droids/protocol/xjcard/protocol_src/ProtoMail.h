/********************************************************************
 * This file is generated by program cap
 * Please do not change it directly
 * 
 * protocol name: CProto
 * protocol version: 1.0
 * protocol author:   
 * protocol desc: 仙剑卡牌客户端后台交互协议-控制协议
 *
 * history:
 * 2013-02-22 : 创建 (V1.0)
********************************************************************/

#include "ProtoMailDef.h"

#ifndef __ProtoMail_H__ 
#define __ProtoMail_H__ 

#include "CProto_Common.h"

#include "CProto.h"



namespace CProto {
/* 系统邮件数据 */
struct stMailSystemDataProto {
public:
    void Encode(unsigned char *buffer, unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer, unsigned int& bufferlen) throw (DecodeError);

    stMailSystemDataProto();
    void SetDefault();

/* 邮件Guid */
    uint64_t mailGuid;
/* 邮件类型 */
    eMailType type;
/* 邮件状态：已读、未读 */
    eMailState state;
/* 标题 */
    unsigned short title_arraylen;	char title[MAIL_MAX_TITLE_LEN];
/* 附件标题 */
    unsigned short attachName_arraylen;	char attachName[MAIL_MAX_ATTACH_FILE_NAME];
/* 邮件附件个数 */
    char attachCount;

private:
    unsigned int arraysize;
};
/* 好友邮件数据 */
struct stMailFriendDataProto {
public:
    void Encode(unsigned char *buffer, unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer, unsigned int& bufferlen) throw (DecodeError);

    stMailFriendDataProto();
    void SetDefault();

/* 邮件Guid */
    uint64_t mailGuid;
/* 邮件类型 */
    eMailType type;
/* 邮件状态：已读、未读 */
    eMailState state;
/* 标题 */
    unsigned short title_arraylen;	char title[MAIL_MAX_TITLE_LEN];
/* 发件人姓名 */
    unsigned short senderName_arraylen;	char senderName[MAX_NAME_LEN];

private:
    unsigned int arraysize;
};
/* 邮件详情数据 */
struct stMailDetailProto {
public:
    void Encode(unsigned char *buffer, unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer, unsigned int& bufferlen) throw (DecodeError);

    stMailDetailProto();
    void SetDefault();

/* 邮件Guid */
    uint64_t mailGuid;
/* 邮件类型 */
    eMailType type;
/* 邮件状态：已读、未读 */
    eMailState state;
/* 发件时间 */
    unsigned int sendTime;
/* 发件人Guid */
    uint64_t senderGuid;
/* 发件人姓名 */
    unsigned short senderName_arraylen;	char senderName[MAX_NAME_LEN];
/* 邮件内容 */
    stQhtml content;
/* 附件图标类型 */
    unsigned char iconType_arraylen;	eAttachType iconType[MAIL_MAX_ATTACH_FILE_COUNT];
/* 附件图标ID */
    unsigned char iconID_arraylen;	short iconID[MAIL_MAX_ATTACH_FILE_COUNT];

private:
    unsigned int arraysize;
};
class XJCMD_CSC_MAIL_LISTSC : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CSC_MAIL_LISTSC();
    void SetDefault();

    
/* 系统邮件列表 */
    unsigned short mailSystemDataList_arraylen;	stMailSystemDataProto mailSystemDataList[MAIL_MAX_SYSTEM_MAIL_COUNT];
/* 好友邮件列表 */
    unsigned short mailFriendDataList_arraylen;	stMailFriendDataProto mailFriendDataList[MAIL_MAX_FRIEND_MAIL_COUNT];
/* 邮件是否已满 */
    eMailState mailFull;
/* 推送列表类型：全量推送邮件列表，新增邮件列表，提取附件列表。后两种客户端做相应列表的修改 */
    eMailState mailListType;

private:
    unsigned int arraysize;
};
class XJCMD_CSC_MAIL_DETAILCS : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CSC_MAIL_DETAILCS();
    void SetDefault();

    
/* 邮件Guid */
    uint64_t mailGuid;

private:
    unsigned int arraysize;
};
class XJCMD_CSC_MAIL_DETAILSC : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CSC_MAIL_DETAILSC();
    void SetDefault();

    
/* 邮件详情 */
    stMailDetailProto mailDetail;

private:
    unsigned int arraysize;
};
class XJCMD_CSC_MAIL_SENDCS : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CSC_MAIL_SENDCS();
    void SetDefault();

    
/* 邮件类型 */
    eMailType type;
/* 收件人Guid */
    uint64_t reciverGuid;
/* 收件人姓名 */
    unsigned short reciverName_arraylen;	char reciverName[MAX_NAME_LEN];
/* 标题 */
    unsigned short title_arraylen;	char title[MAIL_MAX_TITLE_LEN];
/* 邮件内容 */
    stQhtml content;

private:
    unsigned int arraysize;
};
class XJCMD_CSC_MAIL_SENDSC : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CSC_MAIL_SENDSC();
    void SetDefault();

    
/* 发送：0失败，1成功 */
    eMailOpRet sendResult;

private:
    unsigned int arraysize;
};
class XJCMD_CSC_MAIL_DELETECS : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CSC_MAIL_DELETECS();
    void SetDefault();

    
/* 邮件删除类型：0：删除一个，对应mailGuid；1：全部删除，mailGuid传0 */
    eMailDeleteType deleteType;
/* 邮件Guid */
    uint64_t mailGuid;

private:
    unsigned int arraysize;
};
class XJCMD_CSC_MAIL_DELETESC : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CSC_MAIL_DELETESC();
    void SetDefault();

    
/* 删除：0失败，1成功 */
    eMailOpRet deleteResult;
/* 成功删除的guid */
    unsigned short mailRemain_arraylen;	uint64_t mailRemain[MAIL_MAX_SYSTEM_MAIL_COUNT+MAIL_MAX_FRIEND_MAIL_COUNT];

private:
    unsigned int arraysize;
};
class XJCMD_CSC_MAIL_GET_ATTACHCS : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CSC_MAIL_GET_ATTACHCS();
    void SetDefault();

    
/* 邮件Guid */
    uint64_t mailGuid;

private:
    unsigned int arraysize;
};
class XJCMD_CSC_MAIL_GET_ATTACHSC : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CSC_MAIL_GET_ATTACHSC();
    void SetDefault();

    
/* 提取附件：0失败，1成功 */
    eMailOpRet getResult;

private:
    unsigned int arraysize;
};
};


#endif

