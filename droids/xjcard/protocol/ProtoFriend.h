/********************************************************************
 * This file is generated by program cap
 * Please do not change it directly
 * 
 * protocol name: CProto
 * protocol version: 1.0
 * protocol author:   
 * protocol desc: 仙剑卡牌客户端后台交互协议-控制协议
 *
 * history:
 * 2013-02-22 : 创建 (V1.0)
********************************************************************/

#include "ProtoFriendDef.h"

#ifndef __ProtoFriend_H__ 
#define __ProtoFriend_H__ 

#include "CProto_Common.h"

#include "CProto.h"



namespace CProto {
/* 好友武将数据 */
struct stFriendGeneral {
public:
    void Encode(unsigned char *buffer, unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer, unsigned int& bufferlen) throw (DecodeError);

    stFriendGeneral();
    void SetDefault();

/* 武将ID */
    short generalId;
/* 武将等级 */
    short generalLevel;

private:
    unsigned int arraysize;
};
/* 好友数据 */
struct stFriendDataProto {
public:
    void Encode(unsigned char *buffer, unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer, unsigned int& bufferlen) throw (DecodeError);

    stFriendDataProto();
    void SetDefault();

/* 好友guid */
    uint64_t guid;
/* QQ或微信头像 */
    unsigned char portrait_arraylen;	char portrait[MAX_URL_LEN];
/* QQ或微信名称 */
    unsigned char name_arraylen;	char name[MAX_NAME_EX_LEN];
/* 等级 */
    short level;
/* vip等级 */
    short vipLevel;
/* 战力 */
    int fightCap;
/* 是否赠送 */
    char present;
/* 游戏内玩家头像 */
    short faceId;
/* 称号ID */
    short titleId;
/* 本区排名 */
    short rank;
/* 大区排名 */
    short rankWorld;
/* 阵型 */
    short battleArray;
/* 好友武将 */
    unsigned char generals_arraylen;	stFriendGeneral generals[MAX_FRIEND_GENAL_NUM];

private:
    unsigned int arraysize;
};
/* 好友动态数据 */
struct stFriendEventDataProto {
public:
    void Encode(unsigned char *buffer, unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer, unsigned int& bufferlen) throw (DecodeError);

    stFriendEventDataProto();
    void SetDefault();

/* guid */
    uint64_t friendGuid;
/* 动态生成时间 */
    unsigned int createtime;
/* 动态描述，具体描述信息待定 */
    eFriendEventType friendEvent;
/* 动态参数，预留 */
    short eventParam;

private:
    unsigned int arraysize;
};
/* 好友赠送数据 */
struct stFriendPresent {
public:
    void Encode(unsigned char *buffer, unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer, unsigned int& bufferlen) throw (DecodeError);

    stFriendPresent();
    void SetDefault();

/* 好友guid，从好友列表中查找其他需展示的数据 */
    uint64_t friendGuid;
/* 0今天，1前一天 */
    char presentTime;

private:
    unsigned int arraysize;
};
class XJCMD_CSC_FRIENDINFO_LISTCS : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CSC_FRIENDINFO_LISTCS();
    void SetDefault();

    
/* 客户端请求标记，无实际意义 */
    char clientRequest;

private:
    unsigned int arraysize;
};
class XJCMD_CSC_FRIENDINFO_LISTSC : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CSC_FRIENDINFO_LISTSC();
    void SetDefault();

    
/* 好友列表 */
    unsigned char friendList_arraylen;	stFriendDataProto friendList[MAX_FRIENDPROTO_NUM];
/* 对应第FRIEND_NOTICE_ASC_NUM个bit位 */
    proto_vector<unsigned char> friendNotice;

private:
    unsigned int arraysize;
};
class XJCMD_CSC_FRIENDEVENT_LISTCS : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CSC_FRIENDEVENT_LISTCS();
    void SetDefault();

    
/* 客户端请求标记，无实际意义 */
    char clientRequest;

private:
    unsigned int arraysize;
};
class XJCMD_CSC_FRIENDEVENT_LISTSC : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CSC_FRIENDEVENT_LISTSC();
    void SetDefault();

    
/* 好友动态列表 */
    unsigned short friendEventList_arraylen;	stFriendEventDataProto friendEventList[MAX_FRIEND_EVENT_NUM];

private:
    unsigned int arraysize;
};
class XJCMD_CSC_FRIEND_NEWCS : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CSC_FRIEND_NEWCS();
    void SetDefault();

    
/* 客户端请求标记，无实际意义 */
    char clientRequest;

private:
    unsigned int arraysize;
};
class XJCMD_CSC_FRIEND_NEWSC : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CSC_FRIEND_NEWSC();
    void SetDefault();

    
/* 新的朋友 */
    unsigned short friendNew_arraylen;	stFriendDataProto friendNew[MAX_FRIEND_REQUEST_NUM];

private:
    unsigned int arraysize;
};
class XJCMD_CSC_FRIEND_OPCS : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CSC_FRIEND_OPCS();
    void SetDefault();

    
/* 好友操作 */
    eFriendOpType opType;
/* guidTarg */
    uint64_t friendGuid;

private:
    unsigned int arraysize;
};
class XJCMD_CSC_FRIEND_OPSC : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CSC_FRIEND_OPSC();
    void SetDefault();

    
/* 好友操作 */
    eFriendOpType opType;
/* guidTarg */
    uint64_t friendGuid;
/* 0失败1成功 */
    char result;

private:
    unsigned int arraysize;
};
class XJCMD_CSC_FRIEND_PRESENTLISTSC : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CSC_FRIEND_PRESENTLISTSC();
    void SetDefault();

    
/* 好友赠送 */
    unsigned short friendPresent_arraylen;	stFriendPresent friendPresent[MAX_FRIEND_PRESENT];
/* 剩余可领取次数 */
    short remainPresentTimes;

private:
    unsigned int arraysize;
};
class XJCMD_CSC_FRIEND_GET_PRESENTCS : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CSC_FRIEND_GET_PRESENTCS();
    void SetDefault();

    
/* 0为全部领取并回赠，1为点击领取某一个领取奖励 */
    eFriendGetPresentType type;
/* 领取奖励 */
    uint64_t friendGuid;

private:
    unsigned int arraysize;
};
class XJCMD_CSC_FRIEND_GET_PRESENTSC : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CSC_FRIEND_GET_PRESENTSC();
    void SetDefault();

    
/* 好友guid */
    uint64_t friendGuid;
/* 0失败，1成功 */
    char result;
/* 剩余可领取次数 */
    short remainPresentTimes;

private:
    unsigned int arraysize;
};
};


#endif

