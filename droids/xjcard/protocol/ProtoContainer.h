/********************************************************************
 * This file is generated by program cap
 * Please do not change it directly
 * 
 * protocol name: CProto
 * protocol version: 1.0
 * protocol author:   
 * protocol desc: 仙剑卡牌客户端后台交互协议-控制协议
 *
 * history:
 * 2013-02-22 : 创建 (V1.0)
********************************************************************/

#include "ProtoContainerDef.h"

#ifndef __ProtoContainer_H__ 
#define __ProtoContainer_H__ 

#include "CProto_Common.h"

#include "CProto.h"



namespace CProto {
/* 装备贴符数据 */
struct stEquipSignAttrData {
public:
    void Encode(unsigned char *buffer, unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer, unsigned int& bufferlen) throw (DecodeError);

    stEquipSignAttrData();
    void SetDefault();

/* 激活该符位时获得的贴符类型，对应附加属性 */
    unsigned char attrid;
/* 该符位通过贴符已增加的属性值 */
    unsigned int attrvalue;
/* 该符位已贴符的个数 */
    unsigned char cnt;

private:
    unsigned int arraysize;
};
/* 装备穿戴数据 */
struct stEquipOnOffData {
public:
    void Encode(unsigned char *buffer, unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer, unsigned int& bufferlen) throw (DecodeError);

    stEquipOnOffData();
    void SetDefault();

/* 是否已装备 0 未装备 1 已装备 */
    unsigned char ison;
/* 装备在阵位中的索引号 */
    unsigned char battleindex;
/* 装备是否在援护阵位中，0 正式阵位 1 援护阵位 */
    unsigned char assistflag;

private:
    unsigned int arraysize;
};
/* 容器中存放的数据 */
struct stContainerGridData {
public:
    void Encode(unsigned char *buffer, unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer, unsigned int& bufferlen) throw (DecodeError);

    stContainerGridData();
    void SetDefault();

/* 物品数据脏标记 */
    unsigned char dirtyflag_arraylen;	unsigned char dirtyflag[(1+(ITEM_SYNC_FLAG_MAX-1)/8)];
/* 格子号 */
    unsigned short gridid;
/* 格子变化标记 */
    unsigned char changeflag;
/* 物品ID */
    unsigned int itemid;
/* 物品绑定类型 */
    unsigned char bandtype;
/* 物品绑定状态 */
    unsigned char bandstatus;
/* 物品Guid */
    uint64_t guid;
/* 道具当前叠加数 */
    unsigned char overlap;
/* 物品到期时间(UTC的秒数) */
    unsigned int timeout;
/* 装备强化等级 */
    unsigned short equipsolidlevel;
/* 装备升阶等级 */
    unsigned short equipgradelevel;
/* 装备升阶器灵值 */
    unsigned int equipgradespirit;
/* 装备贴符数据 */
    unsigned char equipsignattrs_arraylen;	stEquipSignAttrData equipsignattrs[MAX_LEN_SMALL];
/* 附魔时激活，默认为0未激活 */
    unsigned char equipskillstatus;
/* 装备是否装备信息 */
    stEquipOnOffData equiponoffinfo;

private:
    unsigned int arraysize;
};
class XJCMD_SC_USERBAG_SYNSC : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_SC_USERBAG_SYNSC();
    void SetDefault();

    
/* 角色背包数据版本号 */
    unsigned char version;
/* 角色背包格子总数 */
    unsigned short gridcntitem;
/* 容器格子数据数组 */
    unsigned char griddatasitem_arraylen;	stContainerGridData griddatasitem[255];
/* 角色装备格子总数 */
    unsigned short gridcntequip;
/* 容器格子数据数组 */
    unsigned char griddatasequip_arraylen;	stContainerGridData griddatasequip[255];

private:
    unsigned int arraysize;
};
class XJCMD_SC_ITEMS_STATIC_SYNSC : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_SC_ITEMS_STATIC_SYNSC();
    void SetDefault();

    
/* 道具配表数据版本号 */
    int versiontableitem;
/* 是否增量数据，0 全量 1 增量 */
    char tableitemdatadelta;
/* 道具配表更新数据 */
    unsigned int tableitemdata_arraylen;	char tableitemdata[MAX_LEN_TABLE];
/* 装备配表数据版本号 */
    int versiontableequip;
/* 是否增量数据，0 全量 1 增量 */
    char tableequipdatadelta;
/* 装备配表更新数据 */
    unsigned int tableequipdata_arraylen;	char tableequipdata[MAX_LEN_TABLE];

private:
    unsigned int arraysize;
};
class XJCMD_SC_EQUIPS_DISCARD_SYNSC : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_SC_EQUIPS_DISCARD_SYNSC();
    void SetDefault();

    
/* 丢弃过目前不在背包的装备列表 */
    unsigned short equipdiscard_arraylen;	int equipdiscard[MAX_USEEQUIP_NUM];

private:
    unsigned int arraysize;
};
class XJCMD_CSC_ITEM_DETAILCS : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CSC_ITEM_DETAILCS();
    void SetDefault();

    
/* 物品所有者guid */
    uint64_t ownerguid;
/* 物品guid */
    uint64_t itemguid;
/* 物品所在容器类型 */
    unsigned char containertype;
/* 物品所在的格子号 */
    unsigned short gridid;
/* 物品ID */
    unsigned int itemid;

private:
    unsigned int arraysize;
};
class XJCMD_CSC_ITEM_DETAILSC : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CSC_ITEM_DETAILSC();
    void SetDefault();

    
/* 物品所有者guid */
    uint64_t ownerguid;
/* 物品guid */
    uint64_t itemguid;
/* 物品所在容器类型 */
    unsigned char containertype;
/* 物品所在的格子号 */
    unsigned short gridid;
/* 物品ID */
    unsigned int itemid;
/* 请求结果（0成功 1其他失败） */
    unsigned char status;
/* 容器格子数据数组 */
    stContainerGridData itemdata;

private:
    unsigned int arraysize;
};
};


#endif

