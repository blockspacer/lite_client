/********************************************************************
 * This file is generated by program cap
 * Please do not change it directly
 * 
 * protocol name: CProto
 * protocol version: 1.0
 * protocol author:   
 * protocol desc: 仙剑卡牌客户端后台交互协议-控制协议
 *
 * history:
 * 2013-02-22 : 创建 (V1.0)
********************************************************************/

#include "ProtoExploreDef.h"

#ifndef __ProtoExplore_H__ 
#define __ProtoExplore_H__ 

#include "CProto_Common.h"

#include "CProto.h"



namespace CProto {
/* 探索关卡扩展数据 */
struct stExploreStageDataEx {
public:
    void Encode(unsigned char *buffer, unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer, unsigned int& bufferlen) throw (DecodeError);

    stExploreStageDataEx();
    void SetDefault();

/* 所属章节 */
    char section_index;
/* 所属地图 */
    char map_index;
/* 所属关卡 */
    char stage_index;
/* 数据标记 */
    unsigned char dirtyflag_arraylen;	unsigned char dirtyflag[(1+(ESTAGE_DES_NUM-1)/8)];
/* 开启状态 */
    char open_state;
/* 剩余开启时间 */
    int left_time;
/* 战斗次数 */
    char fight_times;

private:
    unsigned int arraysize;
};
/* 探索关卡数据 */
struct stExploreStageSynData {
public:
    void Encode(unsigned char *buffer, unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer, unsigned int& bufferlen) throw (DecodeError);

    stExploreStageSynData();
    void SetDefault();

/* 所属章节 */
    char section_index;
/* 所属地图 */
    char map_index;
/* 所属关卡 */
    char stage_index;
/* 是否通关 */
    char isfinish;
/* 星数 */
    char star;
/* 关卡类型 */
    char stage_type;
/* 是否删除扩展数据（0-不删除，1-删除） */
    char del_flag;
/* 数据标记 */
    unsigned char dirtyflag_arraylen;	unsigned char dirtyflag[(1+(ESTAGE_DES_NUM-1)/8)];
/* 开启状态 */
    char open_state;
/* 剩余开启时间 */
    int left_time;
/* 战斗次数 */
    char fight_times;

private:
    unsigned int arraysize;
};
class XJCMD_CSC_USEREXPLORE_SYNSC : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CSC_USEREXPLORE_SYNSC();
    void SetDefault();

    
/* 数据版本号 */
    char version_db;
/* 数据脏标记 */
    proto_vector<unsigned char> dirtyflag;
/* 章开启标记 */
    proto_vector<unsigned char> section_open_flag;
/* 地图开启标记 */
    proto_vector<unsigned char> map_open_flag;
/* 同步的关卡数据 */
    proto_vector<stExploreStageSynData> stage_data;

private:
    unsigned int arraysize;
};
class XJCMD_CSC_USEREXPLORE_FULLDATASC : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CSC_USEREXPLORE_FULLDATASC();
    void SetDefault();

    
/* 数据版本号 */
    char version_db;
/* 已开放的章节数 */
    char section_num;
/* 探索关卡完成标记 */
    proto_vector<unsigned char> finishflag;
/* 探索关卡星数 */
    proto_vector<char> stars;
/* 章开启标记 */
    proto_vector<unsigned char> section_open_flag;
/* 地图开启标记 */
    proto_vector<unsigned char> map_open_flag;
/* 关卡扩展数据 */
    proto_vector<stExploreStageDataEx> elite_data_ex;
/* 关卡扩展数据 */
    proto_vector<stExploreStageDataEx> boss_data_ex;
/* 关卡扩展数据 */
    proto_vector<stExploreStageDataEx> hide_data_ex;
/* 关卡扩展数据 */
    proto_vector<stExploreStageDataEx> award_data_ex;

private:
    unsigned int arraysize;
};
class XJCMD_CSC_USEREXPLORE_RES_SYNSC : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CSC_USEREXPLORE_RES_SYNSC();
    void SetDefault();

    
/* 资源数据版本号 */
    int version_res_section;
/* 资源数据版本号类型（全量或者增量） */
    char version_res_section_type;
/* 资源更新数据 */
    proto_vector<char> resdata_section;
/* 资源数据版本号 */
    int version_res_stage;
/* 资源数据版本号类型（全量或者增量） */
    char version_res_stage_type;
/* 资源更新数据 */
    proto_vector<char> resdata_stage;

private:
    unsigned int arraysize;
};
class XJCMD_CSC_USEREXPLORE_CHALLENGECS : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CSC_USEREXPLORE_CHALLENGECS();
    void SetDefault();

    
/* 所属章节 */
    char section_index;
/* 所属地图 */
    char map_index;
/* 所属关卡 */
    char stage_index;

private:
    unsigned int arraysize;
};
class XJCMD_CSC_USEREXPLORE_CHALLENGE_BATCS : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CSC_USEREXPLORE_CHALLENGE_BATCS();
    void SetDefault();

    
/* 所属章节 */
    char section_index;
/* 所属地图 */
    char map_index;
/* 所属关卡 */
    char stage_index;

private:
    unsigned int arraysize;
};
class XJCMD_CSC_USEREXPLORE_SYN_BATCHSC : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CSC_USEREXPLORE_SYN_BATCHSC();
    void SetDefault();

    
/* 数据版本号 */
    char version_db;
/* 关卡类型 */
    char stage_type;
/* 关卡扩展数据 */
    stExploreStageDataEx data_ex;

private:
    unsigned int arraysize;
};
};


#endif

