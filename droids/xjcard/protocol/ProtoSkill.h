/********************************************************************
 * This file is generated by program cap
 * Please do not change it directly
 * 
 * protocol name: CProto
 * protocol version: 1.0
 * protocol author:   
 * protocol desc: 仙剑卡牌客户端后台交互协议-控制协议
 *
 * history:
 * 2013-02-22 : 创建 (V1.0)
********************************************************************/

#include "ProtoSkillDef.h"

#ifndef __ProtoSkill_H__ 
#define __ProtoSkill_H__ 

#include "CProto_Common.h"

#include "CProto.h"



namespace CProto {
/* 物品概率加成 */
struct stSkillItemRatio {
public:
    void Encode(unsigned char *buffer, unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer, unsigned int& bufferlen) throw (DecodeError);

    stSkillItemRatio();
    void SetDefault();

/* 物品id */
    int itemid;
/* 需要的货币类型，参考枚举定义 */
    int moneyType;
/* 需要的货币数量 */
    int money;
/* 物品加成概率 */
    int ratio;

private:
    unsigned int arraysize;
};
/* skill */
struct stSkillLevelData {
public:
    void Encode(unsigned char *buffer, unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer, unsigned int& bufferlen) throw (DecodeError);

    stSkillLevelData();
    void SetDefault();

/* 属性加成 */
    int attrvalue;
/* 强度加成 */
    int power;
/* 回合加成 */
    int duration;
/* 积分上限 */
    int creditsupper;
/* 同技能升级基础概率 */
    int sameskillratio;
/* 不同技能升级基础概率 */
    unsigned char skillratio_arraylen;	stSkillItemRatio skillratio[PROTO_SKILLITEM_TYPE_NUM];
/* 特殊道具技能升级基础概率 */
    unsigned char itemratio_arraylen;	stSkillItemRatio itemratio[PROTO_SKILL_SPECITEM_NUM];
/* 升级银两消耗值 */
    int costmoneyvalue;
/* 第二属性加成 */
    int attrvalue2;

private:
    unsigned int arraysize;
};
/* skill */
struct stSkill {
public:
    void Encode(unsigned char *buffer, unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer, unsigned int& bufferlen) throw (DecodeError);

    stSkill();
    void SetDefault();

/* 技能index */
    unsigned char index;
/* 技能id */
    int id;
/* 技能等级 */
    unsigned char level;
/* 装备的阵型索引 */
    short battlearray_index;
/* 技能升级数据 */
    stSkillLevelData skillLeveData;
/* 当前技能数据 */
    stSkillLevelData skillLeveDataCurrent;

private:
    unsigned int arraysize;
};
class XJCMD_CSC_SKILL_DATASC : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CSC_SKILL_DATASC();
    void SetDefault();

    
/* 技能数据版本号 */
    char skill_version;
/* 技能数据 */
    unsigned char skills_arraylen;	stSkill skills[PROTO_SKILL_NUM];
/* 最大技能容量 */
    unsigned char max_skillcount;

private:
    unsigned int arraysize;
};
class XJCMD_CS_ASK_SKILL_LEVELUPCS : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CS_ASK_SKILL_LEVELUPCS();
    void SetDefault();

    
/* 升级的技能的武将索引，-1时表示升级的普攻技能，非武将天生和援护技能 */
    int general_index;
/* 升级的技能索引 */
    int skill_index;
/* 消耗的技能索引 */
    int cost_skill_index;
/* 消耗的技能道具容器索引 */
    int cost_skill_item_index;
/* 消耗的道具容器索引 */
    unsigned char cost_itemindex_arr_arraylen;	int cost_itemindex_arr[PROTO_SKILL_SPECITEM_NUM];

private:
    unsigned int arraysize;
};
class XJCMD_SC_RET_SKILL_LEVELUPSC : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_SC_RET_SKILL_LEVELUPSC();
    void SetDefault();

    
/* 升级的技能索引 */
    int skill_index;
/* 1成功，0失败 */
    char result;

private:
    unsigned int arraysize;
};
class XJCMD_CS_SKILL_ONCS : public PackBody{
public:
    static int GetCommandID();
    void Encode(unsigned char *buffer,unsigned int& buffersize) throw (EncodeError);
    void Decode(const unsigned char* buffer,unsigned int& bufferlen) throw (DecodeError);
    int CommandID();

    XJCMD_CS_SKILL_ONCS();
    void SetDefault();

    
/* 阵容索引 */
    int battlearray_index;
/* 装备的技能索引 */
    int skill_index;

private:
    unsigned int arraysize;
};
};


#endif

